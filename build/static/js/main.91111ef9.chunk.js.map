{"version":3,"sources":["elements/Header.js","utils/rest.js","pages/Home/Meses.js","pages/Home/AdicionarMes.js","pages/Home/index.js","pages/Movimentacoes.js","App.js","serviceWorker.js","index.js"],"names":["Header","className","to","INITIAL_STATE","loading","data","reducer","state","action","type","init","baseURL","useGet","resource","useReducer","dispatch","carregar","a","axios","get","res","useEffect","refetch","usePost","post","useDelete","delete","usePatch","patch","Rest","Meses","Object","keys","length","map","mes","key","previsao_entrada","entradas","previsao_saida","saidas","AdicionarMes","refAno","useRef","refMes","useState","redir","setRedir","anos","meses","i","push","Fragment","ref","ano","value","num","onClick","current","Home","Movimentacoes","match","params","dataMeses","salvar","remover","descricao","setDescricao","valor","setValor","salvarMovimentacao","isNaN","search","parseFloat","sleep","time","Promise","resolve","setTimeout","removerMovimentacao","id","losding","onBlur","evt","target","movimentacao","onChange","App","path","exact","component","Boolean","window","location","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.91111ef9.chunk.js","sourcesContent":["import React from 'react'\nimport { Link } from 'react-router-dom'\n\nconst Header = () => {\n  return(\n    <nav className='navbar navbar-light bg-light'>\n      <div className='container'>\n          <Link className='navbar-brand' to='/'>MyMoney</Link>\n      </div>\n    </nav>\n  )\n}\nexport default Header","import { useReducer, useEffect } from 'react'\nimport axios from 'axios'\n\nconst INITIAL_STATE = {\n  loading: false,\n  data: {}\n}\n\nconst reducer = (state,action) => {\n  // console.log('state', state, 'action', action)\n  if(action.type === 'REQUEST'){\n    return {\n      ...state,\n      loading: true\n    }\n  }\n  if(action.type === 'SUCCESS') {\n    return {\n      ...state,\n      loading: false,\n      data: action.data\n    }\n  }\n  // manipular meu estado\n  return state\n}\nconst init = baseURL => {\n  const useGet = resource => {\n    const [data, dispatch] = useReducer(reducer, INITIAL_STATE)\n    const carregar = async() => {\n      dispatch({ type: 'REQUEST' })\n      const res = await axios.get(baseURL + resource + '.json')\n      dispatch({ type: 'SUCCESS', data: res.data })\n    }\n    useEffect(() => {\n      carregar()\n    }, [resource])\n    return {\n      ...data,\n      refetch: carregar\n    }\n  }\n  const usePost = resource => {\n    const [data, dispatch] = useReducer(reducer, INITIAL_STATE)\n    const post = async(data) => {\n      dispatch({ type: 'REQUEST' })\n      const res = await axios.post(baseURL + resource + '.json', data)\n        dispatch({\n          type: 'SUCCESS',\n          data: res.data\n        })\n    }\n    return [data, post]\n  }\n  const useDelete = () => {\n    const [data, dispatch] = useReducer(reducer, INITIAL_STATE)\n    const remove = async(resource) => {\n      dispatch({ type: 'REQUEST' })\n      await axios.delete(baseURL + resource + '.json')\n      dispatch({\n        type: 'SUCCESS'\n      })\n    }\n    return [data, remove]\n  }\n  const usePatch = () => {\n    const [data, dispatch] = useReducer(reducer, INITIAL_STATE)\n    const patch = async(resource, data) => {\n      dispatch({ type: 'REQUEST' })\n      await axios\n        .patch(baseURL + resource + '.json', data)\n      dispatch({\n        type: 'SUCCESS'\n      })\n    }\n    return [data, patch]\n  }\n  return {\n    useGet,\n    usePost,\n    useDelete,\n    usePatch\n  }\n}\n\nexport default init","import React from 'react'\nimport { Link } from 'react-router-dom'\nimport Rest from '../../utils/rest'\n\nconst baseURL = 'https://mymoney-devpleno-sandre.firebaseio.com/'\nconst { useGet } = Rest(baseURL)\n\nconst Meses = () => {\n  const data = useGet('meses')\n  if(data.loading){\n    return <span>Carregando...</span>\n  }\n  if(Object.keys(data.data).length > 0){\n    return (\n      <table className='table'>\n        <thead>\n          <tr>\n            <th>Mês</th>\n            <th>Previsão entrada</th>\n            <th>Entrada</th>\n  \n            <th>Precisão de saída</th>\n            <th>Saída</th>\n          </tr>\n        </thead>\n        <tbody>\n          {\n            Object\n              .keys(data.data)\n              .map(mes => {\n                return(\n                  <tr key={mes}>\n                    <td><Link to={`/movimentacoes/${mes}`}>{mes}</Link></td>\n                    <td>{data.data[mes].previsao_entrada}</td>\n                    <td>{data.data[mes].entradas}</td>\n                    <td>{data.data[mes].previsao_saida}</td>\n                    <td>{data.data[mes].saidas}</td>\n                  </tr>\n                )\n              })\n          }\n        </tbody>\n      </table>\n    )\n  }\n  return null\n}\nexport default Meses","import React, { useState , useRef } from 'react'\nimport { Redirect } from 'react-router-dom'\nconst minAno = 2019\nconst maxAno = 2022\nconst AdicionarMes = () => {\n  const refAno = useRef()\n  const refMes = useRef()\n  const [redir, setRedir] = useState('')\n  const anos = []\n  const meses = []\n  for(let i = minAno; i <= maxAno; i++){\n    anos.push(i)\n  }\n  for(let i = 1; i <= 12; i++){\n    meses.push(i)\n  }\n  const zeroPad = num => {\n    if(num < 10){\n      return '0'+num\n    }\n    return num\n  }\n  const verMes = () => {\n    setRedir(refAno.current.value + '- ' + refMes.current.value)\n  }\n  if(redir!==''){\n    return <Redirect to={'/movimentacoes/'+ redir} />\n  }\n  return (\n    <React.Fragment>\n      <h2>Adicionar mês</h2>\n\n      <select ref={refAno}>\n        { anos.map(ano => <option key={ano} value={ano}>{ano}</option>) }\n      </select>\n      <select ref={refMes}>\n        { meses.map(zeroPad).map(mes => <option key={mes} value={mes}>{mes}</option>)}\n      </select>\n      <button onClick={verMes}>Adicionar mês</button>\n    </React.Fragment>\n  )\n}\n\nexport default AdicionarMes","import React from 'react'\nimport Meses from './Meses'\nimport AdicionarMes from './AdicionarMes'\n\nconst Home = () => {\n    return(\n      <div className='container'> \n        <AdicionarMes />\n        <Meses />\n      </div>\n    )\n  }\n\n  export default Home","import React, { useState } from 'react'\n\nimport Rest from '../utils/rest'\n\nconst baseURL = 'https://mymoney-devpleno-sandre.firebaseio.com/'\nconst { useGet, usePost, useDelete, usePatch } = Rest(baseURL)\n\nconst Movimentacoes = ({ match }) => {\n  const data = useGet(`movimentacoes/${match.params.data}`)\n  const dataMeses = useGet(`meses/${match.params.data}`)\n  const [dataPatch, patch] = usePatch()\n  const [postData, salvar] = usePost(`movimentacoes/${match.params.data}`)\n  const [removeData, remover] = useDelete()\n  const [descricao, setDescricao] = useState('')\n  const [valor, setValor] = useState('')\n\n  const onChangeDescricao = evt => {\n    setDescricao(evt.target.value)\n  }\n\n  const onChangeValor = evt => {\n    setValor(evt.target.value)\n  }\n\n  const salvarMovimentacao = async() => {\n    if(!isNaN(valor) && valor.search(/^[-]?\\d+(\\.)?\\d+?$/) >= 0){\n      await salvar({\n        descricao,\n        valor: parseFloat(valor)\n      })\n      setDescricao('')\n      setValor(0.0)\n      data.refetch()\n      await sleep(1000)\n      dataMeses.refetch()\n    }\n  }\n\n  const sleep = time => new Promise(resolve => setTimeout(resolve, time))\n  const removerMovimentacao = async(id) => {\n    await remover(`movimentacoes/${match.params.data}/${id}`)\n    data.refetch()\n    await sleep(1000)\n    dataMeses.refetch()\n  }\n\n  const alterarPrevisaoEntrada = (evt) => {\n    patch(`meses/${match.params.data}`, { previsao_entrada: evt.target.value })\n  }\n\n  const alterarPrevisaoSaida = (evt) => {\n    patch(`meses/${match.params.data}`, { previsao_saida: evt.target.value })\n  }\n\n  return (\n    <div className='container'>\n      <h1>Movimentações</h1>\n      {\n        !dataMeses.losding && dataMeses.data && <div>\n          <span>Previsão entrada: {dataMeses.data.previsao_entrada} </span><input type='text' onBlur={alterarPrevisaoEntrada} /> / Previsão saída: {dataMeses.data.previsao_saida} <input type='text' onBlur={alterarPrevisaoSaida} /><br/>\n          Entradas: {dataMeses.data.entradas} / Saídas {dataMeses.data.saidas}\n        </div>\n      }\n        <table className='table'>\n          <thead>\n            <tr>\n              <th>Descrição</th>\n              <th>Valor</th>\n            </tr>\n          </thead>\n          <tbody>\n            { data.data &&\n              Object\n                .keys(data.data)\n                .map(movimentacao => {\n                  return (\n                    <tr key={movimentacao}>\n                      <td>{data.data[movimentacao].descricao}</td>\n                      <td className='text-right'>\n                        {data.data[movimentacao].valor} {' '}\n                        <button className='btn btn-danger' onClick={() => removerMovimentacao(movimentacao)}>-</button>\n                      </td>\n                    </tr>\n                  )\n                })\n            }\n            <tr>\n              <td>\n                <input type='text' value={descricao} onChange={onChangeDescricao}/>\n              </td>\n              <td>\n                <input type='text' value={valor} onChange={onChangeValor}/>\n                <button className='btn btn-success' onClick={salvarMovimentacao}>+</button>\n              </td>\n            </tr>\n          </tbody>\n        </table>\n    </div>\n  )\n}\n\nexport default Movimentacoes","import React from 'react'\nimport { BrowserRouter as Router, Route } from 'react-router-dom'\nimport Header from './elements/Header'\nimport Home from './pages/Home'\nimport Movimentacoes from './pages/Movimentacoes'\n\nfunction App() {\n\n  return (\n    <Router>\n      <div>\n        <Header />\n        <Route path='/' exact component={Home} />\n        <Route path='/movimentacoes/:data' component={Movimentacoes} />\n      </div>\n    </Router>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport 'bootstrap/dist/css/bootstrap.css'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}